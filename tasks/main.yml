---
# tasks file for podman_play

- name: User and Group Management
  when:
    - podman_play_user is defined
    - podman_play_group is defined
  block:
    - name: Create the app specific group
      ansible.builtin.group:
        name: "{{ podman_play_group  }}"
        system: false
        state: present

    - name: Create the app specific user
      ansible.builtin.user:
        name: "{{ podman_play_user }}"
        group: "{{ podman_play_group }}"
        shell: "/bin/bash"
        system: false
        create_home: true
        state: present
      register: __user_info

# Directories ownership is modified only when the directory does not exist.
# For more details, refer to: https://github.com/containers/podman/blob/main/troubleshooting.md#34-container-creates-a-file-that-is-not-owned-by-the-users-regular-uid
- name: Create root and template config directories
  ansible.builtin.include_tasks: directories.yml
  loop:
    - "{{ podman_play_root_dir }}"
    - "{{ podman_play_template_config_dir }}"

- name: Create additional directories
  ansible.builtin.include_tasks: directories.yml
  loop: "{{ podman_play_dirs }}"
  when: podman_play_dirs is defined

- name: Template custom app raw configs
  ansible.builtin.copy:
    content: "{{ custom_conf.raw_content }}"
    dest: "{{ podman_play_template_config_dir }}/{{ custom_conf.filename }}"
    owner: "{{ podman_play_user | default(ansible_user_id) }}"
    group: "{{ podman_play_group | default(ansible_user_id) }}"
    mode: "0644"
  loop: "{{ podman_play_custom_conf }}"
  loop_control:
    loop_var: custom_conf
  register: __custom_conf_task
  when: podman_play_custom_conf is defined
  notify:
    - restart podman_play_app

- name: Check if app user is lingering
  ansible.builtin.stat:
    path: "/var/lib/systemd/linger/{{ podman_play_user | default(ansible_user_id) }}"
  register: __user_lingering

- name: Enable lingering for user
  ansible.builtin.command: "loginctl enable-linger {{ podman_play_user | default(ansible_user_id) }}"
  when: not __user_lingering.stat.exists

- name: Template kubernetes pod yaml definition
  ansible.builtin.copy:
    content: "{{ podman_play_pod_yaml_definition }}"
    dest: "{{ podman_play_root_dir }}/kubernetes_play.yml"
    owner: "{{ podman_play_user | default(ansible_user_id) }}"
    group: "{{ podman_play_group | default(ansible_user_id) }}"
    mode: "0640"
  register: __kubernetes_yaml_task
  notify:
    - restart podman_play_app

- name: Create quadlet file from kubernetes yaml definition
  containers.podman.podman_play:
    annotation: "{{ podman_play_pod_annotation | default(omit) }}"
    authfile: "{{ podman_play_pod_authfile | default(omit) }}"
    build: "{{ podman_play_pod_build | default(omit) }}"
    cert_dir: "{{ podman_play_pod_cert_dir | default(omit) }}"
    configmap: "{{ podman_play_pod_configmap | default(omit) }}"
    context_dir: "{{ podman_play_pod_context_dir | default(omit) }}"
    debug: "{{ podman_play_pod_debug | default(omit) }}"
    executable: "{{ podman_play_pod_executable | default(omit) }}"
    kube_file: "{{ podman_play_root_dir }}/kubernetes_play.yml"
    log_driver: "{{ podman_play_pod_log_driver | default(omit) }}"
    log_level: "{{ podman_play_pod_log_level | default(omit) }}"
    network: "{{ podman_play_pod_network | default(omit) }}"
    password: "{{ podman_play_pod_password | default(omit) }}"
    quadlet_dir: "{{ podman_play_pod_quadlet_dir | default(omit) }}"
    quadlet_filename: "{{ podman_play_pod_name }}"
    quadlet_options: "{{ podman_play_pod_quadlet_options | default(omit) }}"
    username: "{{ podman_play_pod_username | default(omit) }}"
    quiet: "{{ podman_play_pod_quiet | default(omit ) }}"
    recreate: "{{ podman_play_pod_recreate | default(omit) }}"
    seccomp_profile_root: "{{ podman_play_pod_seccomp_profile_root | default(omit) }}"
    state: "{{ podman_play_pod_state }}"
    tls_verify: "{{ podman_play_pod_tls_verify | default(omit) }}"
    userns: "{{ podman_play_pod_userns | default(omit) }}"
  become_user: "{{ podman_play_user | default(ansible_user_id) }}"
  notify:
    - restart podman_play_app
  when: __kubernetes_yaml_task is changed or __custom_conf_task is changed

- name: Enable Podman auto update timer
  ansible.builtin.systemd:
    name: "podman-auto-update.timer"
    state: "started"
    scope: "user"
    enabled: true
  become_user: "{{ podman_play_user | default(ansible_user_id) }}"
  environment:
    XDG_RUNTIME_DIR: "/run/user/{{ __user_info.uid | default(ansible_user_uid) }}"
  when: podman_play_auto_update | bool

- name: Enable firewalld rule to expose app port
  ansible.posix.firewalld:
    immediate: true
    permanent: true
    port: "{{ expose_port }}"
    state: enabled
  loop: "{{ podman_play_firewalld_expose_ports }}"
  loop_control:
    loop_var: expose_port
  when: podman_play_firewalld_expose_ports is defined

- name: Flush handlers after deployment
  ansible.builtin.meta: flush_handlers

- name: Ensure that systemd app is started
  ansible.builtin.systemd:
    name: "{{ podman_play_pod_name }}.service"
    state: "started"
    scope: "user"
    enabled: true
  become_user: "{{ podman_play_user | default(ansible_user_id) }}"
  environment:
    XDG_RUNTIME_DIR: "/run/user/{{ __user_info.uid | default(ansible_user_uid) }}"
